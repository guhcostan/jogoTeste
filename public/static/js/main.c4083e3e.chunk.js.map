{"version":3,"sources":["App.js","utils/game.js","utils/mouseListiner.js","utils/render-screen.js","serviceWorker.js","index.js"],"names":["socket","document","getElementById","io","game","state","players","points","setState","newState","start","createGame","mouseListener","observers","click","addEventListener","event","command","observerFunction","notifyAll","playerId","x","y","subscribe","push","createMouseListener","App","useState","witdh","setWidth","height","setHeight","color","setColor","updateWindowDimensions","window","innerWidth","innerHeight","on","id","renderScreen","screen","requestAnimationFrame","currentPlayerId","context","getContext","fillStyle","clearRect","player","fillRect","pointId","point","currentPlayer","addPoint","setInterval","db","emit","useEffect","removeEventListener","className","style","position","width","onChangeComplete","hex","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4083e3e.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport createGame from './utils/game.js'\nimport createMouseListener from './utils/mouseListiner'\nimport renderScreen from './utils/render-screen.js'\nimport io from 'socket.io-client';\nimport {SketchPicker} from 'react-color';\n\nconst canvas = document.getElementById('screen')\n\nconst socket = io('localhost:3333')\nlet game = createGame()\nconst mouseListener = createMouseListener(document, canvas, socket)\n\n\nfunction App() {\n\n    const [witdh, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n    const [color, setColor] = useState('red')\n\n    function updateWindowDimensions() {\n        setWidth(window.innerWidth)\n        setHeight(window.innerHeight)\n    }\n\n    startGame()\n\n    setInterval(() => {\n        sync(game.state)\n    }, 200)\n\n    useEffect(() => {\n        updateWindowDimensions()\n        window.addEventListener('resize', updateWindowDimensions);\n        return () => {\n            window.removeEventListener('resize', updateWindowDimensions);\n        }\n    }, [])\n\n    function sync(db){\n        socket.emit('sync', db)\n    }\n\n    function startGame() {\n\n        socket.on('connect', () => {\n            const playerId = socket.id\n\n            const screen = document.getElementById('screen')\n            renderScreen(screen, game, requestAnimationFrame, playerId)\n        })\n\n        socket.on('setup', (state) => {\n            game.setState(state)\n        })\n\n        mouseListener.subscribe((command) =>\n            addPoint(command)\n        )\n\n        socket.on('sync', (state) => {\n            game.setState(state)\n        })\n    }\n\n    function addPoint(command) {\n        command.color = color\n        game.state.points[command.x + '-' + command.y] = command\n\n    }\n\n    return (\n        <div className=\"App\">\n            <div style={{position: \"absolute\"}}>\n                <canvas id={'screen'} width={witdh} height={height} style={{width: witdh, height: height}}/>\n            </div>\n            <div id={'ui'}>\n                <SketchPicker color={color} onChangeComplete={({hex}) => setColor(hex)}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","export default function createGame() {\n    const state = {\n        players: [],\n        points: {},\n    }\n\n    function start() {\n\n    }\n\n    function setState(newState) {\n        state.players = newState.players\n        state.points = newState.points\n    }\n\n    return {\n        state,\n        setState,\n        start\n    }\n}\n","export default function createMouseListener(document) {\n    const state = {\n        observers: [],\n        click: false\n    }\n\n    function subscribe(observerFunction) {\n        state.observers.push(observerFunction)\n    }\n\n    function notifyAll(command) {\n        for (const observerFunction of state.observers) {\n            observerFunction(command)\n        }\n    }\n\n    document.addEventListener('mousedown', handleKeyDown)\n\n    function handleKeyUp() {\n        state.click = false\n    }\n\n    document.addEventListener('mouseup', handleKeyUp)\n    document.addEventListener('mousemove', handleMove)\n\n    function handleKeyDown() {\n        state.click = true\n    }\n\n    function handleMove(event) {\n        if (state.click) {\n            const command = {\n                playerId: state.playerId,\n                x: event.x,\n                y: event.y\n            }\n\n            notifyAll(command)\n        }\n    }\n\n    return {\n        subscribe\n    }\n}","export default function renderScreen(screen, game, requestAnimationFrame, currentPlayerId) {\n    const context = screen.getContext('2d')\n    context.fillStyle = 'black'\n    context.clearRect(0, 0, 50000, 50000)\n\n    for (const playerId in game.state.players) {\n        const player = game.state.players[playerId]\n        context.fillStyle = player.color\n        context.fillRect(player.x-10, player.y-10, 20, 20)\n    }\n\n    for (let pointId in game.state.points) {\n        const point = game.state.points[pointId]\n        context.fillStyle = point.color\n        context.fillRect(point.x-10, point.y-10, 20, 20)\n    }\n    const currentPlayer = game.state.players[currentPlayerId]\n\n    if(currentPlayer) {\n        context.fillStyle = currentPlayer.color\n        context.fillRect(currentPlayer.x, currentPlayer.y, 1, 1)\n    }\n\n    requestAnimationFrame(() => {\n        renderScreen(screen, game, requestAnimationFrame, currentPlayerId)\n    })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}